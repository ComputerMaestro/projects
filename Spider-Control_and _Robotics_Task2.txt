#include<<avr/io.h>

//PID gains
float Kp = 0.0;
float Ki = 0.0;
float Kd = 0.0;
int setPointValue = 127;   //In RPM
int feedbackValue = 0;
float error = 0;
float pComp = 0.0;
float iComp = 0.0;
int integralSum = 0;
float dComp = 0.0;
int errorp = 0;
int errorn = 0;
float overallCorrection = 0.0;
int tachometerRead = 0;
int timerCount = 0;
int bitsCounted = 1;

void irTachometer();
void setupADC();

int main()
{ 
  DDRC = (1 << PORTC0);

  TCCR0A = (1 << WGM00)|(1 << WGM01)|(1 << COM0A1)|(1 << COM0A0);
  OCR0A = 0;
  TCCR0B = (1 << CS02)|(1 << CS00);

  TCCR1A = 0;
  TCCR1C = 0;
  TCNT1 = 0;
  TIMSK1 = (1 << TOIE1);
  sei();
  TCCR0B = (1 << CS12)|(1 << CS10);
  
  setupADC();
  while(1)
  {
    //Calculating error
    error = setPointValue - feedbackValue;
 
    //Porportional component
    pComp = Kp * error;
 
    //Integral component
    integralSum += error;
    iComp = Ki * integralSum;
  
    //Derivative component
    errorp = errorn;
    errorp = error;
    dComp = Kd * (errorn - error)/bitsCounted;
 
    //Overall Correction in Speed
    overallCorrection = pComp + iComp + dComp;

    //Applying Correction
    OCR0A += overallCorrection;

    //Reading Tachometer
    bitsCounted = 0;
    while(tachometerRead < 511)
    {
      tachometerRead = irTachometer();
      if(tachometerRead > 512)
      {
        bitsCounted = TCNT1 + 1;
        if(timerCount != 0)
        {
          bitsCounted += (timerCount * 65536);
          timerCount = 0;
        }
        feedbackValue = 1195185 / bitsCounted;
        break;
      }
    }
  }

  return 0;
}

ISR(TIMER1_OVF_vect)
{
  timerCount++;
}

void setupADC()
{
  ADMUX = (1 << REFS0);
  ADCSRA = (1 << ADEN)|(1 << ADPS1)|1 << ADPS2)|(1 << ADPS0);
}

void irTachometer()
{
  uint8_t theLow = 0;
  ADCSSRA |= (1 << ADSC);
  while(!(ADCSRA&(1 << ADIF)));
  ADCSRA &= ~(1 << ADIF);
  theLow = ADCL;
  return ADCH << 8|theLow;
}
