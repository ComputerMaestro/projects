/*Start connecting the LEDs from left to right starting from PB1 pin at port B with first LED,PD6 to second lED,PD5 to third LED,PD3 to last LED at Arduino UNO*/

//Libraries used
#include<avr/io.h>
#include<util/delay.h>

//Parameters used
int flagConfirm = 0;    //Confirming the selection of LED
int flagLED = 0;    //Flag showing the LED is just selected
int flagBrightness = 0;   //Flag showing whether program is in brightness mode or not
int posLED = 0;   //Gives position of the illuminated LED in the selecteLED array
int selectedLED[4] = {2,64,32,8};   //Contains the pin location number in corresponding PORT in decimal format
int brightness = 127;   //Contains value of the Output Compare register corresponding to the selected LED
int16_t accX = 0;   //Accelerometer reading in the X direction
int16_t accY = 0;   //Accelerometer reading in the Y direction

//All functions made in the program
void acc_X();
void acc_Y();
void selectLEDright();
void selectLEDleft();
void brightnessControl();
void confirmLED();
void TWI_MPU_init();

//Main block
int main()
{
  //Declaring output pins
  DDRD = (1 << PORTD3)|(1 << PORTD5)|(1 << PORTD6);
  DDRB = (1 << PORTB1);
  PORTB = selectedLED[posLED];

  //Initialising TWI
  TWI_MPU_init();

  //Main Loop
  while(1)
  {
    acc_X();    //Getting accelerometer value in X direction
    
    if((accX < -7000)&&(flagConfirm == 0))    //For selection of LED glowing
      {
        flagConfirm = 1;
        PORTD = 0;
        PORTB = 0;
      }
    if(flagConfirm == 0)
    {
      acc_Y();    //Getting acceleromter value in Y  direction
      
      if((accY < -7000)&&(flagLED == 0))    //Selecting next LED in the Left direction
      {
        selectLEDleft();
        flagLED = 1;
        _delay_ms(300);
      }
      else if((accY > 7000)&&(flagLED == 0))    //Selecting next LED in the Right direction
      {
        selectLEDright();
        flagLED = 1;
        _delay_ms(300);
      }
      else if((flagLED == 1)&&(accY >= -7000)&&(accY <= 7000))    //When accelerometer is in flat position
      {
        flagLED = 0;
      }
    }
    else    //When program is in brightness changing mode
    {
      if(accX > 7000)
      {
        if(brightness >= 255) brightness = 255;
        else
        {
          brightness += 5;
          _delay_ms(10);
        }
        brightnessControl();
      }
      else if(accX < -7000)
      {
        if(brightness <= 0) brightness = 0;
        else
        {
          brightness -= 5;
          _delay_ms(50);
        }
        brightnessControl();
      }
    }
    
  }
  return 0;
}

void selectLEDleft()    //For changing LED selection in the Left direction
{
  if(posLED == 0) posLED = 3;
  else posLED--;
  if(posLED == 0)
  {
    PORTB = selectedLED[posLED];
    PORTD = 0;
  }
  else
  {
    PORTD = selectedLED[posLED];
    PORTB = 0;
  }
}

void selectLEDright()   //For changing LED selection in the Right direction
{
  if(posLED == 3) posLED = 0;
  else posLED++;
  if(posLED == 0)
  {
    PORTB = selectedLED[posLED];
    PORTD = 0;
  }
  else
  {
    PORTD = selectedLED[posLED];
    PORTB = 0;
  }
}

void brightnessControl()    //For changing the brightness of the LED selected using corresponding timers
{
  if(flagBrightness == 0)
  {
    //For PORTB1
    if(posLED == 0)
    {
      flagBrightness = 1;
      TCCR1A = (1 << COM1A1)|(1 << WGM11);
      TCCR1B = (1 << WGM13)|(1 << WGM12);
      ICR1 = 255;
      OCR1A = brightness;
      TCCR1B |= (1 << CS12)|(1 << CS10);
    }
    else if(posLED == 1)    //For PORTD6
    {
      flagBrightness = 1;
      TCCR0A = (1 << COM0A1)|(1 << WGM01)|(1 << WGM00);
      OCR0A = brightness;
      TCCR0B = (1 << CS02)|(1 << CS00);
    }
    else if(posLED == 2)    //For PORTD5
    {
      flagBrightness = 1;
      TCCR0A = (1 << COM0B1)|(1 << WGM01)|(1 << WGM00);
      OCR0B = brightness;
      TCCR0B = (1 << CS02)|(1 << CS00);
    }
    else if(posLED == 3)    //For PORTD3
    {
      flagBrightness = 1;
      TCCR2A = (1 << COM2B1)|(1 << WGM21)|(1 << WGM20);
      OCR2B = brightness;
      TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
    }
  }
  else    //Once timer selection is program comes here when function is called 
  {
    switch(posLED)
    {
      case 0: OCR1A = brightness;
      break;
      case 1: OCR0A = brightness;
      break;
      case 2: OCR0B = brightness;
      break;
      case 3: OCR2B = brightness;
      break;
    }
  }
}

//TWI initialisation
void TWI_MPU_init()
{
  TWSR = 0x00;
  TWBR = 12;

  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTA);
  while(!(TWCR&(1 << TWINT)));

  TWDR = 0b11010000;
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWDR = 0x6B;    //Accessing power management register in the MPU6050
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWDR = 0;   //Disabling sleep mode of MPU6050
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWCR = (1 << TWINT)|(1 << TWSTO)|(1 << TWEN);
  _delay_ms(10);

  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTA);
  while(!(TWCR&(1 << TWINT)));

  TWDR = 0b11010000;
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWDR = 0x1A;    //CONFIG register
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWDR = 0x03;    //Setting DLPF bits
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWCR = (1 << TWINT)|(1 << TWSTO)|(1 << TWEN);
  _delay_ms(5);
}

void acc_X()    //For accelerometer value in X direction
{
  accX = 0;
   
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
  while(!(TWCR&(1 <<TWINT)));

  TWDR = 0b11010000;
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWDR = 0x3B;
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTA);
  while(!(TWCR&(1 << TWINT)));
  
  TWDR = 0b11010001;
  TWCR = (1 << TWINT)|(1 << TWEN);;
  while(!(TWCR&(1 << TWINT)));
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
  while(!(TWCR&(1 << TWINT)));
  accX = TWDR << 8;

  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));
  accX |= TWDR;
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
  _delay_ms(5);
}

void acc_Y()    //For accelerometer value in Y direction
{
  accY = 0;
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
  while(!(TWCR&(1 <<TWINT)));

  TWDR = 0b11010000;
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWDR = 0x3D;
  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));

  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTA);
  while(!(TWCR&(1 << TWINT)));
  
  TWDR = 0b11010001;
  TWCR = (1 << TWINT)|(1 << TWEN);;
  while(!(TWCR&(1 << TWINT)));
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
  while(!(TWCR&(1 << TWINT)));
  accY = TWDR << 8;

  TWCR = (1 << TWINT)|(1 << TWEN);
  while(!(TWCR&(1 << TWINT)));
  accY |= TWDR;
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
  _delay_ms(5);
}
